import os
import traceback
from aiogram.fsm.state import State, StatesGroup
from aiogram import types
from aiogram.fsm.context import FSMContext
import logging
import pandas as pd
import re
from dotenv import load_dotenv
from aiogram.fsm.storage.base import StorageKey

load_dotenv()

logger = logging.getLogger(__name__)

class SurveyStates(StatesGroup):
    CONSENT = State()
    IN_PROGRESS = State()

class SurveyManager:
    def __init__(self, data_processor, bot, storage):  
        self.data_processor = data_processor
        self.bot = bot
        self.storage = storage
        self.questions = [
            {
                "user_question": "–°–∫–æ–ª—å–∫–æ –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è —à–∞–≥–æ–≤?",
                "column_name": "–®–∞–≥–∏",
                "type": "int",
                "min": 0,
                "max": 50000
            },
            {
                "user_question": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã —É–¥–µ–ª–∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é? (–≤ –º–∏–Ω—É—Ç–∞—Ö)",
                "column_name": "–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "type": "int",
                "min": 0,
                "max": 1440
            },
            {
                "user_question": "–ï—Å–ª–∏ –Ω–æ—Å–∏—Ç–µ smart-—á–∞—Å—ã, –∫–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∑–∞ –¥–µ–Ω—å?",
                "column_name": "–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å",
                "type": "int",
                "min": 40,
                "max": 200,
                "optional": True  
            },
            {
                "user_question": "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –í—ã —Å–ø–∞–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é?",
                "column_name": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞",
                "type": "float",
                "min": 0.0,
                "max": 24.0
            },
            {
                "user_question": "–ö–∞–∫ –í—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞?",
                "column_name": "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞",
                "type": "category",
                "options": ["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"]
            },
            {
                "user_question": "–í–æ —Å–∫–æ–ª—å–∫–æ –í—ã —É—Å–Ω—É–ª–∏ —ç—Ç–æ–π –Ω–æ—á—å—é? (–ß–ß:–ú–ú)",
                "column_name": "–í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è",
                "type": "time",
                "format": r"^\d{1,2}:\d{2}$"  
            },
            {
                "user_question": "–í–æ —Å–∫–æ–ª—å–∫–æ –í—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å? (–ß–ß:–ú–ú)",
                "column_name": "–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è",
                "type": "time",
                "format": r"^\d{1,2}:\d{2}$"
            },
            {
                "user_question": "–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10",
                "column_name": "–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                "type": "int",
                "min": 1,
                "max": 10
            },
            {
                "user_question": "–ë—ã–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è? –ï—Å–ª–∏ –±—ã–ª–∏, –æ–ø–∏—à–∏—Ç–µ",
                "column_name": "–°—Ç—Ä–µ—Å—Å",
                "type": "text"
            },
            {
                "user_question": "–°–∫–æ–ª—å–∫–æ –í–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?",
                "column_name": "–í–æ–∑—Ä–∞—Å—Ç",
                "type": "int",
                "min": 7,
                "max": 25
            },
            {
                "user_question": "–í–∞—à –ø–æ–ª?",
                "column_name": "–ü–æ–ª",
                "type": "category",
                "options": ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]
            },
            {
                "user_question": "–¢—è–∂—ë–ª—ã–π –¥–µ–Ω—å? –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ —É—Ä–æ–∫–æ–≤?",
                "column_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤",
                "type": "int",
                "min": 0,
                "max": 12
            }
        ]
        self.active_surveys = {}

    async def send_consent_request(self, chat_id: int, state: FSMContext):
        try:
            markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω"), types.KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await self.bot.send_message(
                chat_id,
                "üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=markup
            )
            await state.set_state(SurveyStates.CONSENT) 
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ CONSENT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            await self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_consent(self, message: types.Message, state: FSMContext):
        if message.text == "–°–æ–≥–ª–∞—Å–µ–Ω":
            self.data_processor._update_users_file(message.chat.id)
            await message.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Å–∏—Ö–æ–†–∏—Ç–º! –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?")
            await state.clear()
        else:
            await message.answer("‚ùå –°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            await state.clear()

    async def _start_survey(self, chat_id: int, state: FSMContext):
        await self.bot.send_message(
            chat_id,  
            "üìù –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        self.active_surveys[chat_id] = True
        await state.set_data({
            'current_question': 0,
            'answers': {},
            'start_time': pd.Timestamp.now()
        })
        await self._ask_question(chat_id, 0)
        await state.set_state(SurveyStates.IN_PROGRESS)

    async def _ask_question(self, chat_id: int, question_num: int):
        question = self.questions[question_num]
        markup = self._get_markup_for_question(question)
        text = f"({question_num+1}/{len(self.questions)}) {question['user_question']}"
        
        await self.bot.send_message(
            chat_id,
            text,
            reply_markup=markup
        )

    def _get_markup_for_question(self, question):
        if question['type'] == 'category':
            buttons = [[types.KeyboardButton(text=option)] for option in question['options']]
            return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        return types.ReplyKeyboardRemove()

    async def handle_answer(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        current_q = data['current_question']
        question = self.questions[current_q]
        
        if not self._validate_answer(question, message.text):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return

        data['answers'][question['column_name']] = message.text
        await state.update_data(answers=data['answers'])
        
        if current_q + 1 < len(self.questions):
            await state.update_data(current_question=current_q + 1)
            await self._ask_question(message.chat.id, current_q + 1)
        else:
            await self._complete_survey(message.chat.id, data, state)

    def _validate_answer(self, question, answer):
        if question['type'] == 'int':
            if not answer.isdigit():
                return False
            value = int(answer)
            return question['min'] <= value <= question['max']
        
        elif question['type'] == 'float':
            try:
                value = float(answer)
                return question['min'] <= value <= question['max']
            except ValueError:
                return False
        
        elif question['type'] == 'time':
            try:
                hours, minutes = map(int, answer.replace('.', ':').split(':'))
                return 0 <= hours < 24 and 0 <= minutes < 60
            except:
                return False
        
        elif question['type'] == 'category':
            return answer in question['options']
        
        return True

    async def _complete_survey(self, chat_id: int, data: dict, state: FSMContext):
        try:
            self.data_processor.save_response(chat_id, data['answers'])
            await self.bot.send_message(
                chat_id,
                "üìä –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            await self.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        finally:
            self.active_surveys[chat_id] = False  
            await state.clear()  
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ")

    async def is_survey_in_progress(self, chat_id: int) -> bool:
        return self.active_surveys.get(chat_id, False)

    async def run_scheduled_survey(self) -> bool:
            try:
                logger.info("=== –ó–ê–ü–£–°–ö –û–ü–†–û–°–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú ===")
                
                if not os.path.exists("users.csv"):
                    logger.error("‚ùå –§–∞–π–ª users.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return False

                user_ids = pd.read_csv("users.csv")['user_id'].astype(int).tolist()
                admin_ids = [7687534894]  
                user_ids = [uid for uid in user_ids if uid not in admin_ids]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")

                success = 0
                for user_id in user_ids:
                    try:
                        storage_key = StorageKey(
                            chat_id=user_id,
                            user_id=user_id,
                            bot_id=self.bot.id
                        )
                        user_state = FSMContext(storage=self.storage, key=storage_key) 
                        
                        await self._start_survey(user_id, user_state)
                        success += 1
                        logger.info(f"‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω –¥–ª—è {user_id}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {traceback.format_exc()}")
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {success}/{len(user_ids)}")
                return success > 0

            except Exception as e:
                logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return False